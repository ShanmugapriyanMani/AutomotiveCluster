/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -a cluster_adaptor /home/sruthisathyan/Documents/AutomotiveCluster/myservice.xml
 *
 * qdbusxml2cpp is Copyright (C) 2023 The Qt Company Ltd and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "cluster_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class DbusAdaptor
 */

DbusAdaptor::DbusAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DbusAdaptor::~DbusAdaptor()
{
    // destructor
}

void DbusAdaptor::setDriveMode(int newDriveMode)
{
    // handle method call experion.server.dbus.setDriveMode
    QMetaObject::invokeMethod(parent(), "setDriveMode", Q_ARG(int, newDriveMode));
}

void DbusAdaptor::setEngineTemperatureRange(int tempRange)
{
    // handle method call experion.server.dbus.setEngineTemperatureRange
    QMetaObject::invokeMethod(parent(), "setEngineTemperatureRange", Q_ARG(int, tempRange));
}

void DbusAdaptor::setFuelRange(int fuelRange)
{
    // handle method call experion.server.dbus.setFuelRange
    QMetaObject::invokeMethod(parent(), "setFuelRange", Q_ARG(int, fuelRange));
}

void DbusAdaptor::setIsAbsOn(bool newIsAbsOn)
{
    // handle method call experion.server.dbus.setIsAbsOn
    QMetaObject::invokeMethod(parent(), "setIsAbsOn", Q_ARG(bool, newIsAbsOn));
}

void DbusAdaptor::setIsCarBatteryWarning(bool newIsCarBatteryWarning)
{
    // handle method call experion.server.dbus.setIsCarBatteryWarning
    QMetaObject::invokeMethod(parent(), "setIsCarBatteryWarning", Q_ARG(bool, newIsCarBatteryWarning));
}

void DbusAdaptor::setIsCarBrakeParkingOn(bool newIsCarBrakeParkingOn)
{
    // handle method call experion.server.dbus.setIsCarBrakeParkingOn
    QMetaObject::invokeMethod(parent(), "setIsCarBrakeParkingOn", Q_ARG(bool, newIsCarBrakeParkingOn));
}

void DbusAdaptor::setIsCarChildSeatWarning(bool newIsCarChildSeatWarning)
{
    // handle method call experion.server.dbus.setIsCarChildSeatWarning
    QMetaObject::invokeMethod(parent(), "setIsCarChildSeatWarning", Q_ARG(bool, newIsCarChildSeatWarning));
}

void DbusAdaptor::setIsCarPressureWarning(bool newIsCarPressureWarning)
{
    // handle method call experion.server.dbus.setIsCarPressureWarning
    QMetaObject::invokeMethod(parent(), "setIsCarPressureWarning", Q_ARG(bool, newIsCarPressureWarning));
}

void DbusAdaptor::setIsCarTractionControlWarning(bool newIsCarTractionControlWarning)
{
    // handle method call experion.server.dbus.setIsCarTractionControlWarning
    QMetaObject::invokeMethod(parent(), "setIsCarTractionControlWarning", Q_ARG(bool, newIsCarTractionControlWarning));
}

void DbusAdaptor::setIsHighBeamOn(bool newIsHighBeamOn)
{
    // handle method call experion.server.dbus.setIsHighBeamOn
    QMetaObject::invokeMethod(parent(), "setIsHighBeamOn", Q_ARG(bool, newIsHighBeamOn));
}

void DbusAdaptor::setIsLeftIndicatorOn(bool newIsLeftIndicatorOn)
{
    // handle method call experion.server.dbus.setIsLeftIndicatorOn
    QMetaObject::invokeMethod(parent(), "setIsLeftIndicatorOn", Q_ARG(bool, newIsLeftIndicatorOn));
}

void DbusAdaptor::setIsOilCanWarning(bool newIsOilCanWarning)
{
    // handle method call experion.server.dbus.setIsOilCanWarning
    QMetaObject::invokeMethod(parent(), "setIsOilCanWarning", Q_ARG(bool, newIsOilCanWarning));
}

void DbusAdaptor::setIsRightIndicatorOn(bool newIsRightIndicatorOn)
{
    // handle method call experion.server.dbus.setIsRightIndicatorOn
    QMetaObject::invokeMethod(parent(), "setIsRightIndicatorOn", Q_ARG(bool, newIsRightIndicatorOn));
}

void DbusAdaptor::setIsSeatBeltWarning(bool newIsSeatBeltWarning)
{
    // handle method call experion.server.dbus.setIsSeatBeltWarning
    QMetaObject::invokeMethod(parent(), "setIsSeatBeltWarning", Q_ARG(bool, newIsSeatBeltWarning));
}

void DbusAdaptor::setRpmStartingAndEndingRange(int rpmStartingRange, int rpmEndingRange)
{
    // handle method call experion.server.dbus.setRpmStartingAndEndingRange
    QMetaObject::invokeMethod(parent(), "setRpmStartingAndEndingRange", Q_ARG(int, rpmStartingRange), Q_ARG(int, rpmEndingRange));
}

void DbusAdaptor::setSpeedStartingAndEndingRange(int speedStartingRange, int speedEndingRange)
{
    // handle method call experion.server.dbus.setSpeedStartingAndEndingRange
    QMetaObject::invokeMethod(parent(), "setSpeedStartingAndEndingRange", Q_ARG(int, speedStartingRange), Q_ARG(int, speedEndingRange));
}


#include "moc_cluster_adaptor.cpp"
